"""
Icons for E-Ink Display
Contains bitmap data for various icons used in the EVCC display
"""

# Sun icon for PV power (48x48 pixels)
# 'Shopicons_Regular_Sun', 48x48px
SUN_ICON_48x48 = bytes([
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff,
    0xfc, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0x3f, 0x3f, 0xff, 0xff, 0xf8, 0x7c, 0x3e, 0x1f, 0xff,
    0xff, 0xf8, 0x7c, 0x3e, 0x1f, 0xff, 0xff, 0xf8, 0x3c, 0x3c, 0x1f, 0xff, 0xff, 0xfc, 0x1f, 0xf8,
    0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x7f, 0xff, 0xfe, 0x3f,
    0xff, 0xff, 0xfc, 0x7f, 0xfc, 0x0f, 0xf8, 0x1f, 0xf0, 0x3f, 0xfc, 0x07, 0xe0, 0x07, 0xe0, 0x3f,
    0xfe, 0x0f, 0x80, 0x01, 0xf0, 0x7f, 0xff, 0x8f, 0x00, 0x00, 0xf1, 0xff, 0xff, 0xdf, 0x03, 0xc0,
    0xfb, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 0xf8, 0x7f, 0xff, 0xff, 0xfc,
    0x1f, 0xf8, 0x3f, 0xff, 0xf0, 0x3c, 0x3f, 0xfc, 0x3c, 0x0f, 0xf0, 0x3c, 0x3f, 0xfc, 0x3c, 0x0f,
    0xf0, 0x3c, 0x3f, 0xfc, 0x3c, 0x0f, 0xf0, 0x3c, 0x3f, 0xfc, 0x3c, 0x0f, 0xff, 0xfc, 0x1f, 0xf8,
    0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xdf,
    0x03, 0xc0, 0xfb, 0xff, 0xff, 0x8f, 0x80, 0x00, 0xf1, 0xff, 0xfe, 0x0f, 0x80, 0x01, 0xf0, 0x7f,
    0xfc, 0x07, 0xe0, 0x07, 0xe0, 0x3f, 0xfc, 0x0f, 0xfc, 0x1f, 0xf0, 0x3f, 0xfe, 0x3f, 0xff, 0xff,
    0xfc, 0x7f, 0xff, 0xfe, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0xfc,
    0x1f, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 0x3c, 0x3c, 0x1f, 0xff, 0xff, 0xf8, 0x7c, 0x3e, 0x1f, 0xff,
    0xff, 0xf8, 0x7c, 0x3e, 0x1f, 0xff, 0xff, 0xfc, 0xfc, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x3f,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
])

# Icon dimensions
SUN_ICON_WIDTH = 48
SUN_ICON_HEIGHT = 48

# Small sun icon for compact layouts (16x16)
SUN_ICON_16x16 = bytes([
    0xff, 0xff, 0xf9, 0x9f, 0xf9, 0x9f, 0xf8, 0x1f,
    0xf0, 0x0f, 0xe0, 0x07, 0xc1, 0x83, 0x98, 0x19,
    0x98, 0x19, 0xc1, 0x83, 0xe0, 0x07, 0xf0, 0x0f,
    0xf8, 0x1f, 0xf9, 0x9f, 0xf9, 0x9f, 0xff, 0xff
])

SUN_ICON_16_WIDTH = 16
SUN_ICON_16_HEIGHT = 16

def draw_bitmap_icon(framebuf, icon_data, x, y, width, height, color=1):
    """
    Draw a bitmap icon on the framebuffer
    
    Args:
        framebuf: FrameBuffer object to draw on
        icon_data: Bytes object containing bitmap data
        x, y: Position to draw the icon
        width, height: Icon dimensions
        color: Color to draw (1 for white on e-ink)
    """
    try:
        byte_width = (width + 7) // 8  # Number of bytes per row
        
        # Convert to list to avoid bytearray comparison issues
        if isinstance(icon_data, (bytes, bytearray)):
            icon_list = list(icon_data)
        else:
            icon_list = icon_data
        
        icon_len = len(icon_list)
        
        for row in range(height):
            for col in range(width):
                byte_index = row * byte_width + col // 8
                bit_index = 7 - (col % 8)
                
                # Use safe indexing
                if 0 <= byte_index < icon_len:
                    pixel_bit = (icon_list[byte_index] >> bit_index) & 1
                    if pixel_bit == 0:  # Icon uses 0 for visible pixels
                        framebuf.pixel(x + col, y + row, color)
                        
    except Exception as e:
        print(f"Icon drawing error: {e}")
        # Draw a simple fallback pattern
        try:
            for i in range(min(width, 8)):
                for j in range(min(height, 8)):
                    if (i + j) % 2 == 0:
                        framebuf.pixel(x + i, y + j, color)
        except Exception as fallback_error:
            print(f"Fallback drawing also failed: {fallback_error}")

def draw_sun_icon(framebuf, x, y, color=1):
    """
    Draw the sun icon for PV power display
    
    Args:
        framebuf: FrameBuffer object to draw on
        x, y: Position to draw the icon
        color: Color to draw (1 for white on e-ink)
    """
    draw_bitmap_icon(framebuf, SUN_ICON_48x48, x, y,
                    SUN_ICON_WIDTH, SUN_ICON_HEIGHT, color)


def draw_sun_icon_small(framebuf, x, y, color=1):
    """
    Draw the small sun icon for compact layouts
    
    Args:
        framebuf: FrameBuffer object to draw on
        x, y: Position to draw the icon
        color: Color to draw (1 for white on e-ink)
    """
    draw_bitmap_icon(framebuf, SUN_ICON_16x16, x, y,
                    SUN_ICON_16_WIDTH, SUN_ICON_16_HEIGHT, color)


# Future icons can be added here:
# BATTERY_ICON_32x32 = bytes([...])
# GRID_ICON_32x32 = bytes([...])
# CAR_ICON_32x32 = bytes([...])